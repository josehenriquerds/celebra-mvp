// <auto-generated />
using System;
using System.Collections.Generic;
using Celebre.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Celebre.Infrastructure.Migrations
{
    [DbContext(typeof(CelebreDbContext))]
    partial class CelebreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Celebre.Domain.Entities.Checkin", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<bool>("AtGate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("at_gate");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("GuestId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("guest_id");

                    b.Property<DateTimeOffset>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_checkins");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_checkins_event_id");

                    b.HasIndex("GuestId")
                        .HasDatabaseName("ix_checkins_guest_id");

                    b.ToTable("checkins", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.ConsentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_consent_logs");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_consent_logs_contact_id");

                    b.ToTable("consent_logs", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("full_name");

                    b.Property<string>("HouseholdId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("household_id");

                    b.Property<bool>("IsVip")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_vip");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone");

                    b.Property<string>("Relation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("amigo")
                        .HasColumnName("relation");

                    b.Property<string>("RestrictionsJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("restrictions_json");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_contacts");

                    b.HasIndex("HouseholdId")
                        .HasDatabaseName("ix_contacts_household_id");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("ix_contacts_phone");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.EngagementScore", b =>
                {
                    b.Property<string>("ContactId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_id");

                    b.Property<string>("EventId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("bronze")
                        .HasColumnName("tier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("value");

                    b.HasKey("ContactId", "EventId")
                        .HasName("pk_engagement_scores");

                    b.HasIndex("EventId", "Tier")
                        .HasDatabaseName("ix_engagement_scores_event_id_tier");

                    b.ToTable("engagement_scores", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("address");

                    b.Property<decimal>("BudgetTotal")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("budget_total");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time");

                    b.PrimitiveCollection<List<string>>("Hosts")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("hosts");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("venue_name");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.EventLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("EventId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload_json");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("source");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_event_logs");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_event_logs_created_at");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_event_logs_event_id");

                    b.HasIndex("Source")
                        .HasDatabaseName("ix_event_logs_source");

                    b.ToTable("event_logs", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.GiftRegistryItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("BuyerContactId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("buyer_contact_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("Link")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("link");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("disponivel")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_gift_registry_items");

                    b.HasIndex("BuyerContactId")
                        .HasDatabaseName("ix_gift_registry_items_buyer_contact_id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_gift_registry_items_event_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_gift_registry_items_status");

                    b.ToTable("gift_registry_items", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Guest", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<int>("Children")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("children");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("InviteStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("nao_enviado")
                        .HasColumnName("invite_status");

                    b.Property<bool>("OptOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("opt_out");

                    b.Property<string>("Rsvp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("pendente")
                        .HasColumnName("rsvp");

                    b.Property<int>("Seats")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("seats");

                    b.Property<bool>("TransportNeeded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("transport_needed");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_guests");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_guests_contact_id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_guests_event_id");

                    b.HasIndex("Rsvp")
                        .HasDatabaseName("ix_guests_rsvp");

                    b.HasIndex("EventId", "ContactId")
                        .IsUnique()
                        .HasDatabaseName("ix_guests_event_id_contact_id");

                    b.ToTable("guests", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.GuestTag", b =>
                {
                    b.Property<string>("GuestId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("guest_id");

                    b.Property<string>("TagId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tag_id");

                    b.HasKey("GuestId", "TagId")
                        .HasName("pk_guest_tags");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_guest_tags_tag_id");

                    b.ToTable("guest_tags", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Household", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("label");

                    b.Property<int>("SizeCached")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("size_cached");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_households");

                    b.ToTable("households", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Interaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("channel");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_id");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kind");

                    b.Property<DateTimeOffset>("OccurredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload_json");

                    b.HasKey("Id")
                        .HasName("pk_interactions");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_interactions_contact_id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_interactions_event_id");

                    b.HasIndex("OccurredAt")
                        .HasDatabaseName("ix_interactions_occurred_at");

                    b.ToTable("interactions", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.MessageTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("ContentButtons")
                        .HasColumnType("jsonb")
                        .HasColumnName("content_buttons");

                    b.Property<string>("ContentText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("pt_BR")
                        .HasColumnName("locale");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.PrimitiveCollection<List<string>>("Variables")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("variables");

                    b.HasKey("Id")
                        .HasName("pk_message_templates");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_message_templates_event_id");

                    b.ToTable("message_templates", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Seat", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<double>("Rotation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("rotation");

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("table_id");

                    b.Property<double>("X")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("x");

                    b.Property<double>("Y")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("y");

                    b.HasKey("Id")
                        .HasName("pk_seats");

                    b.HasIndex("TableId")
                        .HasDatabaseName("ix_seats_table_id");

                    b.HasIndex("TableId", "Index")
                        .IsUnique()
                        .HasDatabaseName("ix_seats_table_id_index");

                    b.ToTable("seats", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.SeatAssignment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("GuestId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("guest_id");

                    b.Property<bool>("Locked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("locked");

                    b.Property<string>("SeatId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("seat_id");

                    b.HasKey("Id")
                        .HasName("pk_seat_assignments");

                    b.HasIndex("GuestId")
                        .HasDatabaseName("ix_seat_assignments_guest_id");

                    b.HasIndex("SeatId")
                        .IsUnique()
                        .HasDatabaseName("ix_seat_assignments_seat_id");

                    b.ToTable("seat_assignments", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.SegmentTag", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsDynamic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_dynamic");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("RuleJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("rule_json");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_segment_tags");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_segment_tags_event_id");

                    b.ToTable("segment_tags", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Table", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.Property<double>("Rotation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("rotation");

                    b.Property<string>("Shape")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("round")
                        .HasColumnName("shape");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<double>("X")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("x");

                    b.Property<double>("Y")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("y");

                    b.Property<string>("Zone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("zone");

                    b.HasKey("Id")
                        .HasName("pk_tables");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_tables_event_id");

                    b.ToTable("tables", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Task", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("AssigneeUserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("assignee_user_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("DueAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_at");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("RelatedVendorId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("related_vendor_id");

                    b.Property<int?>("SlaHours")
                        .HasColumnType("integer")
                        .HasColumnName("sla_hours");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("aberta")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.HasIndex("DueAt")
                        .HasDatabaseName("ix_tasks_due_at");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_tasks_event_id");

                    b.HasIndex("RelatedVendorId")
                        .HasDatabaseName("ix_tasks_related_vendor_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_tasks_status");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.TimelineEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("ActorType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor_type");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("MetaJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("meta_json");

                    b.Property<DateTimeOffset>("OccurredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("RefId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ref_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_timeline_entries");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_timeline_entries_event_id");

                    b.HasIndex("OccurredAt")
                        .HasDatabaseName("ix_timeline_entries_occurred_at");

                    b.ToTable("timeline_entries", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Vendor", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category");

                    b.Property<decimal?>("ContractValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("contract_value");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("ativo")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_vendors");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_vendors_event_id");

                    b.ToTable("vendors", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.VendorMedia", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("Alt")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("alt");

                    b.Property<string>("Blurhash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("blurhash");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("sort_order");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("url");

                    b.Property<string>("VendorId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("vendor_id");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_vendor_media");

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("ix_vendor_media_sort_order");

                    b.HasIndex("VendorId", "Type")
                        .HasDatabaseName("ix_vendor_media_vendor_id_type");

                    b.ToTable("vendor_media", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.VendorNote", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("AuthorUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author_user_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note_text");

                    b.Property<string>("VendorId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("vendor_id");

                    b.HasKey("Id")
                        .HasName("pk_vendor_notes");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("ix_vendor_notes_vendor_id");

                    b.ToTable("vendor_notes", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.VendorPartner", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.PrimitiveCollection<List<string>>("Categories")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("categories");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("company_name");

                    b.Property<DateTimeOffset?>("ConsentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consent_at");

                    b.Property<string>("ConsentText")
                        .HasColumnType("text")
                        .HasColumnName("consent_text");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("contact_name");

                    b.Property<string>("Country")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("BR")
                        .HasColumnName("country");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DescriptionLong")
                        .HasColumnType("text")
                        .HasColumnName("description_long");

                    b.Property<string>("DescriptionShort")
                        .HasMaxLength(280)
                        .HasColumnType("character varying(280)")
                        .HasColumnName("description_short");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("InstagramHandle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("instagram_handle");

                    b.Property<string>("PhoneE164")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone_e164");

                    b.Property<int?>("PriceFromCents")
                        .HasColumnType("integer")
                        .HasColumnName("price_from_cents");

                    b.Property<int>("ProfileScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("profile_score");

                    b.Property<int?>("ServiceRadiusKm")
                        .HasColumnType("integer")
                        .HasColumnName("service_radius_km");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("pending_review")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("website_url");

                    b.Property<string>("WhatsappUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("whatsapp_url");

                    b.HasKey("Id")
                        .HasName("pk_vendor_partners");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_vendor_partners_email");

                    b.HasIndex("PhoneE164")
                        .IsUnique()
                        .HasDatabaseName("ix_vendor_partners_phone_e164");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_vendor_partners_slug");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_vendor_partners_status");

                    b.HasIndex("City", "State")
                        .HasDatabaseName("ix_vendor_partners_city_state");

                    b.ToTable("vendor_partners", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.VendorReview", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("AuthorContactId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author_contact_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("EventId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<string>("VendorId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("vendor_id");

                    b.HasKey("Id")
                        .HasName("pk_vendor_reviews");

                    b.HasIndex("Rating")
                        .HasDatabaseName("ix_vendor_reviews_rating");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("ix_vendor_reviews_vendor_id");

                    b.ToTable("vendor_reviews", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.VendorStatusLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("ActorUserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("actor_user_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("VendorId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("vendor_id");

                    b.HasKey("Id")
                        .HasName("pk_vendor_status_log");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_vendor_status_log_created_at");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("ix_vendor_status_log_vendor_id");

                    b.ToTable("vendor_status_log", (string)null);
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Checkin", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Event", "Event")
                        .WithMany("Checkins")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_checkins_events_event_id");

                    b.HasOne("Celebre.Domain.Entities.Guest", "Guest")
                        .WithMany("Checkins")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_checkins_guests_guest_id");

                    b.Navigation("Event");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.ConsentLog", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Contact", "Contact")
                        .WithMany("ConsentLogs")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_consent_logs_contacts_contact_id");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Contact", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Household", "Household")
                        .WithMany("Contacts")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_contacts_households_household_id");

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.EngagementScore", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Contact", "Contact")
                        .WithMany("EngagementScores")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_engagement_scores_contacts_contact_id");

                    b.HasOne("Celebre.Domain.Entities.Event", "Event")
                        .WithMany("EngagementScores")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_engagement_scores_events_event_id");

                    b.Navigation("Contact");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.EventLog", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Event", "Event")
                        .WithMany("EventLogs")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_event_logs_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.GiftRegistryItem", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Contact", "BuyerContact")
                        .WithMany("GiftsPurchased")
                        .HasForeignKey("BuyerContactId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_gift_registry_items_contacts_buyer_contact_id");

                    b.HasOne("Celebre.Domain.Entities.Event", "Event")
                        .WithMany("GiftRegistryItems")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gift_registry_items_events_event_id");

                    b.Navigation("BuyerContact");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Guest", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Contact", "Contact")
                        .WithMany("Guests")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_guests_contacts_contact_id");

                    b.HasOne("Celebre.Domain.Entities.Event", "Event")
                        .WithMany("Guests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_guests_events_event_id");

                    b.Navigation("Contact");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.GuestTag", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Guest", "Guest")
                        .WithMany("Tags")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_guest_tags_guests_guest_id");

                    b.HasOne("Celebre.Domain.Entities.SegmentTag", "Tag")
                        .WithMany("Guests")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_guest_tags_segment_tags_tag_id");

                    b.Navigation("Guest");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Interaction", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Contact", "Contact")
                        .WithMany("Interactions")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_interactions_contacts_contact_id");

                    b.HasOne("Celebre.Domain.Entities.Event", "Event")
                        .WithMany("Interactions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_interactions_events_event_id");

                    b.Navigation("Contact");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.MessageTemplate", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Event", "Event")
                        .WithMany("MessageTemplates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_templates_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Seat", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Table", "Table")
                        .WithMany("Seats")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_seats_tables_table_id");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.SeatAssignment", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Guest", "Guest")
                        .WithMany("SeatAssignments")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_seat_assignments_guests_guest_id");

                    b.HasOne("Celebre.Domain.Entities.Seat", "Seat")
                        .WithMany("Assignments")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_seat_assignments_seats_seat_id");

                    b.Navigation("Guest");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.SegmentTag", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Event", "Event")
                        .WithMany("SegmentTags")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_segment_tags_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Table", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Event", "Event")
                        .WithMany("Tables")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tables_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Task", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Event", "Event")
                        .WithMany("Tasks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_events_event_id");

                    b.HasOne("Celebre.Domain.Entities.Vendor", "RelatedVendor")
                        .WithMany("Tasks")
                        .HasForeignKey("RelatedVendorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_tasks_vendors_related_vendor_id");

                    b.Navigation("Event");

                    b.Navigation("RelatedVendor");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.TimelineEntry", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Event", "Event")
                        .WithMany("TimelineEntries")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_timeline_entries_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Vendor", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.Event", "Event")
                        .WithMany("Vendors")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vendors_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.VendorMedia", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.VendorPartner", "Vendor")
                        .WithMany("Media")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vendor_media_vendor_partners_vendor_id");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.VendorNote", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.VendorPartner", "Vendor")
                        .WithMany("Notes")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vendor_notes_vendor_partners_vendor_id");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.VendorReview", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.VendorPartner", "Vendor")
                        .WithMany("Reviews")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vendor_reviews_vendor_partners_vendor_id");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.VendorStatusLog", b =>
                {
                    b.HasOne("Celebre.Domain.Entities.VendorPartner", "Vendor")
                        .WithMany("StatusLog")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vendor_status_log_vendor_partners_vendor_id");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Contact", b =>
                {
                    b.Navigation("ConsentLogs");

                    b.Navigation("EngagementScores");

                    b.Navigation("GiftsPurchased");

                    b.Navigation("Guests");

                    b.Navigation("Interactions");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Event", b =>
                {
                    b.Navigation("Checkins");

                    b.Navigation("EngagementScores");

                    b.Navigation("EventLogs");

                    b.Navigation("GiftRegistryItems");

                    b.Navigation("Guests");

                    b.Navigation("Interactions");

                    b.Navigation("MessageTemplates");

                    b.Navigation("SegmentTags");

                    b.Navigation("Tables");

                    b.Navigation("Tasks");

                    b.Navigation("TimelineEntries");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Guest", b =>
                {
                    b.Navigation("Checkins");

                    b.Navigation("SeatAssignments");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Household", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Seat", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.SegmentTag", b =>
                {
                    b.Navigation("Guests");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Table", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.Vendor", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Celebre.Domain.Entities.VendorPartner", b =>
                {
                    b.Navigation("Media");

                    b.Navigation("Notes");

                    b.Navigation("Reviews");

                    b.Navigation("StatusLog");
                });
#pragma warning restore 612, 618
        }
    }
}
