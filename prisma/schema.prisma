// Celebre - Event CRM Schema
// Complete database schema with all entities

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// CORE ENTITIES
// ============================================

model Event {
  id          String   @id @default(cuid())
  title       String
  dateTime    DateTime @map("date_time")
  venueName   String   @map("venue_name")
  address     String
  budgetTotal Float    @default(0) @map("budget_total")
  hosts       String[] // Array of host names
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  guests            Guest[]
  tasks             Task[]
  vendors           Vendor[]
  giftRegistryItems GiftRegistryItem[]
  tables            Table[]
  timelineEntries   TimelineEntry[]
  messageTemplates  MessageTemplate[]
  eventLogs         EventLog[]
  segmentTags       SegmentTag[]
  interactions      Interaction[]
  engagementScores  EngagementScore[]
  checkins          Checkin[]

  @@map("events")
}

model Contact {
  id              String          @id @default(cuid())
  fullName        String          @map("full_name")
  phone           String          @unique
  email           String?
  relation        ContactRelation @default(amigo)
  notes           String?
  restrictionsJson Json?          @map("restrictions_json") // Food allergies, mobility, etc.
  isVip           Boolean         @default(false) @map("is_vip")
  householdId     String?         @map("household_id")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  // Relations
  household        Household?        @relation(fields: [householdId], references: [id])
  guests           Guest[]
  interactions     Interaction[]
  engagementScores EngagementScore[]
  consentLogs      ConsentLog[]
  giftsPurchased   GiftRegistryItem[]

  @@index([phone])
  @@map("contacts")
}

model Household {
  id          String   @id @default(cuid())
  label       String // "Fam√≠lia Silva", "Amigos da Faculdade"
  sizeCached  Int      @default(1) @map("size_cached") // Denormalized count
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  contacts Contact[]

  @@map("households")
}

model Guest {
  id             String       @id @default(cuid())
  eventId        String       @map("event_id")
  contactId      String       @map("contact_id")
  inviteStatus   InviteStatus @default(nao_enviado) @map("invite_status")
  rsvp           RsvpStatus   @default(pendente)
  seats          Int          @default(1) // Number of seats reserved
  children       Int          @default(0) // Number of children
  transportNeeded Boolean     @default(false) @map("transport_needed")
  optOut         Boolean      @default(false) @map("opt_out")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  // Relations
  event           Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  contact         Contact          @relation(fields: [contactId], references: [id])
  tags            GuestTag[]
  seatAssignments SeatAssignment[]
  checkins        Checkin[]

  @@unique([eventId, contactId])
  @@index([eventId])
  @@index([contactId])
  @@index([rsvp])
  @@map("guests")
}

model SegmentTag {
  id        String   @id @default(cuid())
  eventId   String   @map("event_id")
  name      String
  ruleJson  Json     @map("rule_json") // DSL for dynamic segmentation
  isDynamic Boolean  @default(true) @map("is_dynamic")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  event Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  guests GuestTag[]

  @@map("segment_tags")
}

model GuestTag {
  guestId String @map("guest_id")
  tagId   String @map("tag_id")

  // Relations
  guest Guest      @relation(fields: [guestId], references: [id], onDelete: Cascade)
  tag   SegmentTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([guestId, tagId])
  @@map("guest_tags")
}

// ============================================
// ENGAGEMENT & INTERACTIONS
// ============================================

model Interaction {
  id         String      @id @default(cuid())
  eventId    String      @map("event_id")
  contactId  String      @map("contact_id")
  channel    Channel
  kind       InteractionKind
  payloadJson Json       @map("payload_json")
  occurredAt DateTime    @default(now()) @map("occurred_at")

  // Relations
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id])

  @@index([eventId])
  @@index([contactId])
  @@index([occurredAt])
  @@map("interactions")
}

model EngagementScore {
  contactId String         @map("contact_id")
  eventId   String         @map("event_id")
  value     Int            @default(0)
  tier      EngagementTier @default(bronze)
  updatedAt DateTime       @updatedAt @map("updated_at")

  // Relations
  contact Contact @relation(fields: [contactId], references: [id])
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([contactId, eventId])
  @@index([eventId, tier])
  @@map("engagement_scores")
}

model TimelineEntry {
  id         String         @id @default(cuid())
  eventId    String         @map("event_id")
  actorType  ActorType      @map("actor_type")
  type       TimelineType
  refId      String?        @map("ref_id") // Reference to related entity
  occurredAt DateTime       @default(now()) @map("occurred_at")
  metaJson   Json?          @map("meta_json")

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([occurredAt])
  @@map("timeline_entries")
}

// ============================================
// TASKS & VENDORS
// ============================================

model Task {
  id              String     @id @default(cuid())
  eventId         String     @map("event_id")
  title           String
  assigneeUserId  String?    @map("assignee_user_id")
  dueAt           DateTime?  @map("due_at")
  status          TaskStatus @default(aberta)
  slaHours        Int?       @map("sla_hours")
  relatedVendorId String?    @map("related_vendor_id")
  description     String?
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")

  // Relations
  event         Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  relatedVendor Vendor? @relation(fields: [relatedVendorId], references: [id])

  @@index([eventId])
  @@index([status])
  @@index([dueAt])
  @@map("tasks")
}

// Old event-specific vendor relationship (kept for backward compatibility)
model Vendor {
  id            String       @id @default(cuid())
  eventId       String       @map("event_id")
  name          String
  phone         String
  category      String // "Buffet", "Fotografia", "DJ", etc.
  contractValue Float?       @map("contract_value")
  status        VendorStatus @default(ativo)
  notes         String?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  // Relations
  event Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@index([eventId])
  @@map("vendors")
}

// ============================================
// VENDOR MARKETPLACE (Partners/Suppliers)
// ============================================

model VendorPartner {
  id               String               @id @default(cuid())
  userId           String?              @map("user_id") // For login/auth
  slug             String               @unique
  companyName      String               @map("company_name")
  contactName      String               @map("contact_name")
  email            String               @unique
  phoneE164        String               @unique @map("phone_e164")
  instagramHandle  String?              @map("instagram_handle")
  websiteUrl       String?              @map("website_url")
  whatsappUrl      String?              @map("whatsapp_url")

  // Location
  city             String
  state            String
  country          String               @default("BR")
  serviceRadiusKm  Int?                 @map("service_radius_km")

  // Business info
  categories       String[] // Array: ["Buffet", "Doces"]
  priceFromCents   Int?                 @map("price_from_cents")
  descriptionShort String?              @map("description_short") @db.VarChar(280)
  descriptionLong  String?              @map("description_long") @db.Text

  // Status & moderation
  status           VendorPartnerStatus  @default(pending_review)
  profileScore     Int                  @default(0) @map("profile_score") // 0-100

  // LGPD
  consentText      String?              @map("consent_text") @db.Text
  consentAt        DateTime?            @map("consent_at")

  createdAt        DateTime             @default(now()) @map("created_at")
  updatedAt        DateTime             @updatedAt @map("updated_at")

  // Relations
  media            VendorMedia[]
  reviews          VendorReview[]
  notes            VendorNote[]
  statusLog        VendorStatusLog[]

  @@index([status])
  @@index([city, state])
  @@index([slug])
  @@map("vendor_partners")
}

model VendorMedia {
  id        String          @id @default(cuid())
  vendorId  String          @map("vendor_id")
  type      VendorMediaType
  url       String
  width     Int?
  height    Int?
  blurhash  String?
  alt       String?
  sortOrder Int             @default(0) @map("sort_order")

  // Relations
  vendor VendorPartner @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId, type])
  @@index([sortOrder])
  @@map("vendor_media")
}

model VendorReview {
  id              String   @id @default(cuid())
  vendorId        String   @map("vendor_id")
  rating          Int // 1-5
  comment         String?  @db.Text
  authorContactId String?  @map("author_contact_id")
  eventId         String?  @map("event_id") // Optional link to event
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  vendor VendorPartner @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@index([rating])
  @@map("vendor_reviews")
}

model VendorNote {
  id           String   @id @default(cuid())
  vendorId     String   @map("vendor_id")
  authorUserId String   @map("author_user_id")
  noteText     String   @map("note_text") @db.Text
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  vendor VendorPartner @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@map("vendor_notes")
}

model VendorStatusLog {
  id            String              @id @default(cuid())
  vendorId      String              @map("vendor_id")
  action        VendorStatusAction
  actorUserId   String?             @map("actor_user_id")
  reason        String?             @db.Text
  createdAt     DateTime            @default(now()) @map("created_at")

  // Relations
  vendor VendorPartner @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@index([createdAt])
  @@map("vendor_status_log")
}

// ============================================
// GIFT REGISTRY
// ============================================

model GiftRegistryItem {
  id              String           @id @default(cuid())
  eventId         String           @map("event_id")
  title           String
  link            String?
  price           Float?
  status          GiftStatus       @default(disponivel)
  buyerContactId  String?          @map("buyer_contact_id")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  // Relations
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  buyerContact Contact? @relation(fields: [buyerContactId], references: [id])

  @@index([eventId])
  @@index([status])
  @@map("gift_registry_items")
}

// ============================================
// CONSENT & LGPD
// ============================================

model ConsentLog {
  id        String       @id @default(cuid())
  contactId String       @map("contact_id")
  source    ConsentSource
  action    ConsentAction
  text      String? // Full text of what was agreed to
  createdAt DateTime     @default(now()) @map("created_at")

  // Relations
  contact Contact @relation(fields: [contactId], references: [id])

  @@index([contactId])
  @@map("consent_logs")
}

// ============================================
// TABLE PLANNING
// ============================================

model Table {
  id       String     @id @default(cuid())
  eventId  String     @map("event_id")
  label    String // "Mesa 1", "Mesa Principal"
  capacity Int
  zone     String? // "Sal√£o Principal", "Varanda"
  x        Float      @default(0) // Canvas position
  y        Float      @default(0)
  rotation Float      @default(0)
  shape    TableShape @default(round)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  event Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  seats Seat[]

  @@index([eventId])
  @@map("tables")
}

model Seat {
  id       String @id @default(cuid())
  tableId  String @map("table_id")
  index    Int // Seat number on table
  x        Float  @default(0) // Relative to table center
  y        Float  @default(0)
  rotation Float  @default(0)

  // Relations
  table       Table            @relation(fields: [tableId], references: [id], onDelete: Cascade)
  assignments SeatAssignment[]

  @@unique([tableId, index])
  @@index([tableId])
  @@map("seats")
}

model SeatAssignment {
  id      String  @id @default(cuid())
  guestId String  @map("guest_id")
  seatId  String  @map("seat_id")
  locked  Boolean @default(false) // Prevent auto-reassignment

  // Relations
  guest Guest @relation(fields: [guestId], references: [id], onDelete: Cascade)
  seat  Seat  @relation(fields: [seatId], references: [id], onDelete: Cascade)

  @@unique([seatId])
  @@index([guestId])
  @@map("seat_assignments")
}

// ============================================
// CHECK-IN
// ============================================

model Checkin {
  id        String   @id @default(cuid())
  eventId   String   @map("event_id")
  guestId   String   @map("guest_id")
  atGate    Boolean  @default(true) @map("at_gate")
  timestamp DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  guest Guest @relation(fields: [guestId], references: [id])

  @@index([eventId])
  @@index([guestId])
  @@map("checkins")
}

// ============================================
// MESSAGES & TEMPLATES
// ============================================

model MessageTemplate {
  id             String   @id @default(cuid())
  eventId        String   @map("event_id")
  name           String
  variables      String[] // ["first_name", "event_title", "date"]
  contentText    String   @map("content_text")
  contentButtons Json?    @map("content_buttons") // WhatsApp buttons
  locale         String   @default("pt_BR")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@map("message_templates")
}

// ============================================
// AUDIT & OBSERVABILITY
// ============================================

model EventLog {
  id          String   @id @default(cuid())
  eventId     String?  @map("event_id")
  source      String // "whatsapp", "api", "cron", "user"
  type        String // "rsvp_updated", "message_sent", etc.
  payloadJson Json     @map("payload_json")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  event Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([source])
  @@index([createdAt])
  @@map("event_logs")
}

// ============================================
// ENUMS
// ============================================

enum ContactRelation {
  familia
  amigo
  trabalho
  fornecedor
}

enum InviteStatus {
  nao_enviado
  enviado
  entregue
  lido
}

enum RsvpStatus {
  pendente
  sim
  nao
  talvez
}

enum Channel {
  whatsapp
  sms
  email
  web
}

enum InteractionKind {
  mensagem
  clique
  foto
  anexo
  chamada
}

enum EngagementTier {
  bronze
  prata
  ouro
}

enum ActorType {
  system
  host
  bot
  guest
}

enum TimelineType {
  rsvp
  msg
  checkin
  presente
  tarefa
}

enum TaskStatus {
  aberta
  em_andamento
  concluida
  atrasada
}

enum VendorStatus {
  ativo
  inativo
  pendente
}

enum GiftStatus {
  disponivel
  reservado
  comprado
}

enum ConsentSource {
  form
  whatsapp
  admin
}

enum ConsentAction {
  opt_in
  opt_out
}

enum TableShape {
  round
  square
  rect
}

enum VendorPartnerStatus {
  pending_review
  approved
  rejected
  suspended
}

enum VendorMediaType {
  logo
  cover
  gallery
}

enum VendorStatusAction {
  submitted
  approved
  rejected
  suspended
  updated
  reactivated
}